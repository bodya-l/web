// app/api/dishes/route.js
import { NextResponse } from 'next/server';
import prisma from '../../../lib/prisma'; // –í–∞—à —à–ª—è—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π

// --- 1. –û–ù–û–í–õ–ï–ù–ê –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –û–¢–†–ò–ú–ê–ù–ù–Ø —Å—Ç—Ä–∞–≤ (GET) ---
export async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        
        // üí° 1. –û—Ç—Ä–∏–º—É—î–º–æ –û–ë–ò–î–í–ê –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ URL
        const categoryName = searchParams.get('category');
        const restaurantId = searchParams.get('restaurantId'); // ‚¨ÖÔ∏è –ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä

        // üí° 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –û–ë–ò–î–í–ê –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –º—ñ—Å—Ü—ñ
        if (!categoryName || !restaurantId) {
            return NextResponse.json(
                { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ "category" —Ç–∞ "restaurantId"' },
                { status: 400 }
            );
        }

        // üí° 3. –û–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ Prisma
        // –ú–∏ —à—É–∫–∞—î–º–æ —Å—Ç—Ä–∞–≤–∏, –¥–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞–∑–≤—ñ –Ü ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        const dishes = await prisma.dish.findMany({
            where: {
                category: {
                    name: categoryName,
                    restaurantId: Number(restaurantId) // ‚¨ÖÔ∏è –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
                },
            },
        });

        return NextResponse.json(dishes, { status: 200 });
    } catch (error) {
        console.error('Error fetching dishes:', error);
        return NextResponse.json(
            { error: 'Internal Server Error' },
            { status: 500 }
        );
    }
}

// --- 2. –í–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –°–¢–í–û–†–ï–ù–ù–Ø –Ω–æ–≤–æ—ó —Å—Ç—Ä–∞–≤–∏ (POST) ---
// (–ó–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ –¥–æ–¥–∞–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫)
export async function POST(request) {
    try {
        const data = await request.json();

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if (!data.name || !data.price || !data.categoryId) {
             return NextResponse.json(
                { error: 'Name, price, and categoryId are required' },
                { status: 400 }
            );
        }

        const newDish = await prisma.dish.create({
            data: {
                name: data.name,
                description: data.description,
                price: parseFloat(data.price),
                calories: data.calories ? parseInt(data.calories) : null,
                imageUrl: data.imageUrl,
                categoryId: parseInt(data.categoryId),
            },
        });

        return NextResponse.json(newDish, { status: 201 }); // 201 Created

    } catch (error)
    {
        console.error('Failed to create dish:', error);
        // –î–æ–¥–∞–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø–æ–º–∏–ª–∫—É Prisma (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ—ñ—Å–Ω—É—é—á–∞ categoryId)
        if (error.code === 'P2003') { // Foreign key constraint failed
             return NextResponse.json(
                { error: 'Invalid categoryId: This category does not exist.' },
                { status: 400 }
            );
        }
        
        return NextResponse.json(
            { error: 'Failed to create dish' },
            { status: 500 }
        );
    }
}
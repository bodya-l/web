// app/api/restaurants/[id]/route.ts
import { NextResponse } from 'next/server';
// üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Å–µ–≤–¥–æ–Ω—ñ–º '@', —è–∫–∏–π –≤–∫–∞–∑—É—î –Ω–∞ 'app'
import prisma from '@/lib/prisma'; 

type RouteParams = {
    params: {
        id: string; 
    }
}

export async function GET(request: Request, { params }: RouteParams) {
    try {
        const { id } = params;
        const numericId = Number(id);

        if (isNaN(numericId)) {
            return NextResponse.json({ message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID' }, { status: 400 });
        }

        // –¶–µ–π –∑–∞–ø–∏—Ç —Å–ø—Ä–∞—Ü—é—î, –∫–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        const restaurant = await prisma.restaurant.findUnique({
            where: { id: numericId },
            select: { 
                id: true,
                name: true,
                description: true,
                logoUrl: true,   
                address: true,   
                stars: true      
            }
        });

        if (!restaurant) {
            console.warn(`[API] –†–µ—Å—Ç–æ—Ä–∞–Ω –∑ ID: ${numericId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î!`);
            return NextResponse.json({ message: '–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' }, { status: 404 });
        }

        return NextResponse.json(restaurant);

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ API /api/restaurants/[id]:', error);
        return NextResponse.json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
}
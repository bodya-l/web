// app/api/create-order/route.ts
import { NextResponse } from 'next/server';
import Pusher from 'pusher';
import prisma from '@/lib/prisma';
import { Prisma } from '@prisma/client'; // üí° 1. –î–û–î–ê–ù–û –¶–ï–ô –Ü–ú–ü–û–†–¢
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth.config';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Pusher
const pusher = new Pusher({
  appId: process.env.PUSHER_APP_ID!,
  key: process.env.PUSHER_KEY!,
  secret: process.env.PUSHER_SECRET!,
  cluster: process.env.PUSHER_CLUSTER!,
  useTLS: true,
});

// –¢–∏–ø –¥–ª—è –¥–∞–Ω–∏—Ö, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∑ –∫–æ—à–∏–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞
type CartItem = {
  dishId: number; 
  quantity: number;
};

// –¢–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è Pusher
type PusherItemDetails = {
    name: string;
    quantity: number;
    price: number;
};

// –¢–∏–ø –¥–ª—è Prisma nested write
type OrderItemCreateData = {
    dishId: number; 
    quantity: number; 
    priceAtPurchase: number; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–Ω—É –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏
};

export async function POST(request: Request) {
  try {
    // 1. –ê–í–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–Ø
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ message: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –£–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.' }, { status: 401 });
    }
    const userId = Number(session.user.id); 

    // 2. –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–• –ó –¢–Ü–õ–ê –ó–ê–ü–ò–¢–£
    const body: { cart: CartItem[]; restaurantId: string } = await request.json();
    const { cart, restaurantId } = body;

    // 3. –í–ê–õ–Ü–î–ê–¶–Ü–Ø –í–•–Ü–î–ù–ò–• –î–ê–ù–ò–•
    if (!cart || cart.length === 0) {
      return NextResponse.json({ message: '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π' }, { status: 400 });
    }
    
    if (!restaurantId) {
        return NextResponse.json({ message: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É' }, { status: 400 });
    }
    
    const numericRestaurantId = Number(restaurantId);
    if (isNaN(numericRestaurantId)) {
        return NextResponse.json({ message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É' }, { status: 400 });
    }

    // 4. –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–• –ó –ë–î –¢–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø
    const dishIds = cart.map((item) => item.dishId);
    
    const dishesFromDb = await prisma.dish.findMany({
      where: { id: { in: dishIds } },
      include: { category: { select: { restaurantId: true } } }
    });

    if (dishesFromDb.length !== cart.length) {
        const foundIds = new Set(dishesFromDb.map(d => d.id));
        const missingIds = dishIds.filter(id => !foundIds.has(id));
        return NextResponse.json({ message: `–°—Ç—Ä–∞–≤–∏ –∑ ID: ${missingIds.join(', ')} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ` }, { status: 404 });
    }
    
    const allDishesMatchRestaurant = dishesFromDb.every(
        dish => dish.category.restaurantId === numericRestaurantId
    );

    if (!allDishesMatchRestaurant) {
        return NextResponse.json({ message: '–ö–æ—à–∏–∫ –º—ñ—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞–≤–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –∞–±–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –Ω–µ–≤—ñ—Ä–Ω–∏–π.' }, { status: 400 });
    }
    
    // 5. –†–û–ó–†–ê–•–£–ù–û–ö –°–£–ú–ò —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ OrderItem –¥–∞–Ω–∏—Ö
    let totalPrice = 0;
    const dishDetailsMap = new Map(
        dishesFromDb.map((item) => [item.id, { price: item.price, name: item.name }])
    );
    
    const itemsToCreate: OrderItemCreateData[] = [];
    const itemsForPusher: PusherItemDetails[] = [];
    
    for (const cartItem of cart) {
      const details = dishDetailsMap.get(cartItem.dishId);
      
      if (details) {
        const itemTotalPrice = details.price * cartItem.quantity;
        totalPrice += itemTotalPrice;
        
        itemsToCreate.push({
            dishId: cartItem.dishId,
            quantity: cartItem.quantity,
            priceAtPurchase: details.price, 
        });
        
        itemsForPusher.push({
            name: details.name,
            quantity: cartItem.quantity,
            price: details.price
        });
      }
    }

    // 6. –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –í –ë–î (–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è)
    const savedOrder = await prisma.order.create({
      data: {
        userId: userId,
        restaurantId: numericRestaurantId, 
        totalPrice: totalPrice,
        status: 'PENDING', 
        items: {
            create: itemsToCreate, 
        }
      },
      include: {
          items: {
              include: { dish: { select: { name: true } } } 
          },
          user: {
              select: { name: true, email: true } 
          }
      }
    });

    // 7. PUSHER: –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    const channelName = `restaurant-${restaurantId}`; 
    const eventName = 'new-order';
    
    const pusherPayload = {
        message: `–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! (ID: ${savedOrder.id})`,
        order: {
            id: savedOrder.id,
            totalPrice: savedOrder.totalPrice,
            status: savedOrder.status,
            createdAt: savedOrder.createdAt,
            items: savedOrder.items.map(item => ({ 
                name: item.dish.name,
                quantity: item.quantity,
                priceAtPurchase: item.priceAtPurchase
            }))
        },
        userName: savedOrder.user.name || session.user.name || '–ê–Ω–æ–Ω—ñ–º–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
        userEmail: savedOrder.user.email || session.user.email,
    };
    
    await pusher.trigger(channelName, eventName, pusherPayload);

    // 8. –£–°–ü–Ü–®–ù–ê –í–Ü–î–ü–û–í–Ü–î–¨
    return NextResponse.json({ success: true, orderId: savedOrder.id }, { status: 201 });

  // üí° 2. –û–ù–û–í–õ–ï–ù–û –¶–ï–ô –ë–õ–û–ö 'catch'
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ Prisma (—Ü–µ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø–æ–º–∏–ª–∫—É TypeScript)
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
        // –¢–µ–ø–µ—Ä TypeScript "–∑–Ω–∞—î", —â–æ 'error.code' —ñ—Å–Ω—É—î
        if (error.code === 'P2003') { // Foreign key constraint failed
            // –ü–æ–º–∏–ª–∫–∞ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, userId –∞–±–æ dishId –Ω–µ —ñ—Å–Ω—É—î)
            return NextResponse.json({ message: '–ü–æ–º–∏–ª–∫–∞ –∑–≤\'—è–∑–∫—É –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä. ID —Å—Ç—Ä–∞–≤–∏ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î)' }, { status: 400 });
        }
    }
    
    // –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞ P2003 –∞–±–æ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø–æ–º–∏–ª–∫–∞ Prisma
    return NextResponse.json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏—à–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}
// app/api/orders/restaurant/[restaurantId]/route.ts
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma'; // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —à–ª—è—Ö –¥–æ prisma –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth.config';

// üí° 1. –í–ò–ü–†–ê–í–õ–ï–ù–û: –æ—á—ñ–∫—É—î–º–æ 'restaurantId' (camelCase)
type RouteParams = {
    params: {
        restaurantId: string;
    }
}

export async function GET(request: Request, { params }: RouteParams) {
    try {
        const session = await getServerSession(authOptions);
        
        if (!session?.user?.id) {
            return NextResponse.json({ message: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' }, { status: 401 });
        }
        
        // üí° 2. –í–ò–ü–†–ê–í–õ–ï–ù–û: –æ—Ç—Ä–∏–º—É—î–º–æ 'restaurantId' (camelCase)
        const { restaurantId } = params;
        const restaurantIdNum = Number(restaurantId);

        if (isNaN(restaurantIdNum)) {
            // –¶—è –ø–æ–º–∏–ª–∫–∞ –±—ñ–ª—å—à–µ –Ω–µ –º–∞—î –∑'—è–≤–ª—è—Ç–∏—Å—è
            return NextResponse.json({ message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É' }, { status: 400 });
        }

        // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –í–õ–ê–°–ù–ò–ö–û–ú —Ü—å–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É?
        const restaurant = await prisma.restaurant.findFirst({ // findFirst –±–µ–∑–ø–µ—á–Ω—ñ—à–µ
            where: {
                id: restaurantIdNum,
                ownerId: Number(session.user.id) // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ id –≤–ª–∞—Å–Ω–∏–∫–∞ = id —Å–µ—Å—ñ—ó
            }
        });
        
        // (–Ø–∫—â–æ —É –≤–∞—Å —î —Ä–æ–ª—å ADMIN, –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ü—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É)
        // if (!restaurant && session.user.role !== 'ADMIN') { 
        if (!restaurant) {
            return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ (–í–∏ –Ω–µ –≤–ª–∞—Å–Ω–∏–∫)' }, { status: 403 });
        }

        // 4. –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –£–°–Ü–ú–ê –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        const orders = await prisma.order.findMany({
            where: {
                restaurantId: restaurantIdNum,
                status: {
                    in: ['PENDING', 'PREPARING', 'READY']
                }
            },
            include: {
                user: {
                    select: { name: true }
                },
                items: {
                    include: {
                        dish: {
                            select: { name: true }
                        }
                    }
                }
            },
            orderBy: {
                createdAt: 'asc' 
            }
        });

        // 5. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        return NextResponse.json(orders);

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ /api/orders/restaurant:', error);
        return NextResponse.json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
}
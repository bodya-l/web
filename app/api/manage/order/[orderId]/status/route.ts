// app/api/manage/order/[orderId]/status/route.ts
import { NextResponse } from 'next/server';
import Pusher from 'pusher';
import prisma from '@/lib/prisma';
import { authOptions } from '@/lib/auth.config';
import { getServerSession } from 'next-auth/next';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Pusher
const pusher = new Pusher({
    appId: process.env.PUSHER_APP_ID!,
    key: process.env.PUSHER_KEY!,
    secret: process.env.PUSHER_SECRET!,
    cluster: process.env.PUSHER_CLUSTER!,
    useTLS: true,
});

// ‚ñº‚ñº‚ñº –Ø–≤–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤ ‚ñº‚ñº‚ñº
type OrderStatus = 'PENDING' | 'PREPARING' | 'READY' | 'COMPLETED';

export async function PUT(
    request: Request,
    { params }: { params: { orderId: string } }
) {
    try {
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        const session = await getServerSession(authOptions);
        if (!session?.user || session.user.role !== 'OWNER') {
             return NextResponse.json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' }, { status: 403 });
        }
        
        const orderId = parseInt(params.orderId);
        
        // 2. –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–∞ —è–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º–æ –π–æ–≥–æ –¥–æ –Ω–∞—à–æ–≥–æ —Ç–∏–ø—É OrderStatus
        const { status } = await request.json();
        const newStatus = status as OrderStatus; // ‚¨ÖÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–û
        
        // 3. –û–±'—î–∫—Ç —Å–ø–æ–≤—ñ—â–µ–Ω—å (—Ç–µ–ø–µ—Ä –±–µ–∑–ø–µ—á–Ω–∏–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ newStatus)
        const statusMap = {
            'PREPARING': '–ø—Ä–∏–π–Ω—è—Ç–æ –¥–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è! üë®‚Äçüç≥',
            'READY': '–≥–æ—Ç–æ–≤–µ —Ç–∞ –æ—á—ñ–∫—É—î –≤–∏–¥–∞—á—ñ! üõéÔ∏è',
            'PENDING': '–æ—á—ñ–∫—É—î',
            'COMPLETED': '–≤–∏–¥–∞–Ω–æ'
        } as const;
        
        // 4. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        const updatedOrder = await prisma.order.update({
            where: { id: orderId },
            data: { status: newStatus },
            select: { userId: true, id: true, status: true, restaurantId: true } // –ü–æ—Ç—Ä—ñ–±–µ–Ω ID –∫–ª—ñ—î–Ω—Ç–∞
        });

        // 5. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        const channelName = `user-${updatedOrder.userId}`;
        const eventName = 'order-status-update';
        
        await pusher.trigger(channelName, eventName, {
            orderId: updatedOrder.id,
            newStatus: updatedOrder.status,
            message: `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${updatedOrder.id} –±—É–ª–æ ${statusMap[newStatus]}`, 
        });

        return NextResponse.json({ success: true, order: updatedOrder });
    } catch (error) {
        console.error("Error updating order status:", error);
        return NextResponse.json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
}
// app/api/manage/restaurants/route.js
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth.config'; 
import prisma from '@/lib/prisma';

// üí° –ü–†–ò–ú–Ü–¢–ö–ê: –ú–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –ø–æ–º–∏–ª–∫–æ–≤–∏–π TypeScript-–∫–æ–¥ (type RouteParams = ...)
// –±–æ —Ü–µ .js —Ñ–∞–π–ª. –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JSDoc –¥–ª—è —Ç–∏–ø—ñ–≤.

/**
* @typedef {object} RestaurantCreateData
* @property {string} name
* @property {string} [description]
* @property {string} [imageUrl]
*/

// –§—É–Ω–∫—Ü—ñ—è GET –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–ª–∞—Å–Ω–∏–∫–∞
export async function GET() {
    try {
        const session = await getServerSession(authOptions);

        // 1. –ü–ï–†–ï–í–Ü–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á
        if (!session?.user?.id || session.user.role !== 'OWNER') {
            return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –í–õ–ê–°–ù–ò–ö–ê.' }, { status: 403 });
        }
        
        // üí° 2. –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID —Å–µ—Å—ñ—ó (—Ä—è–¥–æ–∫) –Ω–∞ –ß–ò–°–õ–û
        const ownerId = Number(session.user.id);

        if (isNaN(ownerId)) {
             return NextResponse.json({ message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' }, { status: 400 });
        }

        // 3. –û–¢–†–ò–ú–£–Ñ–ú–û –†–ï–°–¢–û–†–ê–ù–ò
        const restaurants = await prisma.restaurant.findMany({
            where: {
                ownerId: ownerId, // –¢–µ–ø–µ—Ä –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ —á–∏—Å–ª–æ
            },
            orderBy: {
                name: 'asc',
            },
            include: {
                orders: {
                    select: { id: true }
                }
            }
        });

        return NextResponse.json(restaurants, { status: 200 });

    } catch (error) {
        console.error('Error fetching owner restaurants:', error);
        return NextResponse.json(
            { message: 'Internal Server Error' },
            { status: 500 }
        );
    }
}

// –§—É–Ω–∫—Ü—ñ—è POST –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
export async function POST(request) {
    try {
        const session = await getServerSession(authOptions);

        if (!session?.user?.id || session.user.role !== 'OWNER') {
            return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –í–õ–ê–°–ù–ò–ö–ê.' }, { status: 403 });
        }
        
        // üí° 4. –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –¢—É—Ç —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –Ω–∞ —á–∏—Å–ª–æ
        const ownerId = Number(session.user.id);
        if (isNaN(ownerId)) {
             return NextResponse.json({ message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' }, { status: 400 });
        }

        /** @type {RestaurantCreateData} */
        const data = await request.json();

        if (!data.name) {
            return NextResponse.json({ message: 'Restaurant name is required' }, { status: 400 });
        }

        // 5. –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–°–¢–û–†–ê–ù–£
        const newRestaurant = await prisma.restaurant.create({
            data: {
                name: data.name,
                description: data.description,
                // 'imageUrl' —É –≤–∞—Å –≤ —Å—Ö–µ–º—ñ –Ω–µ–º–∞—î, –∞–ª–µ —î 'logoUrl' —ñ 'bannerUrl'
                // –Ø –∑–∞–ª–∏—à—É —è–∫ —É –≤–∞—Å, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î 'imageUrl' —É —Å—Ö–µ–º—ñ Restaurant
                // imageUrl: data.imageUrl, 
                logoUrl: data.logoUrl, // –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ —Ü–µ?
                ownerId: ownerId, // –ü–µ—Ä–µ–¥–∞—î–º–æ —á–∏—Å–ª–æ
            },
        });

        return NextResponse.json(newRestaurant, { status: 201 });

    } catch (error) {
        console.error('Error creating restaurant:', error);
        if (error?.code === 'P2002') { // –£–Ω—ñ–∫–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è
            return NextResponse.json({ message: 'Restaurant with this name already exists' }, { status: 409 });
        }
        return NextResponse.json(
            { message: 'Internal Server Error' },
            { status: 500 }
        );
    }
}
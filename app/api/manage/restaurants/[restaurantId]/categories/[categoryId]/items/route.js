import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
// üí° –í–ò–ü–†–ê–í–õ–ï–ù–û: –®–ª—è—Ö –¥–æ auth.config (7 —Ä—ñ–≤–Ω—ñ–≤)
import { authOptions } from '../../../../../../../../lib/auth.config';
// üí° –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è @/ –¥–ª—è prisma
import prisma from '@/lib/prisma';

// --- GET: –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ---
export async function GET(request, { params }) {
    const session = await getServerSession(authOptions);
    const restaurantId = parseInt(params.restaurantId);
    const categoryId = parseInt(params.categoryId);

    // –î–æ–¥–∞–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É (—è–∫—â–æ –≤–æ–Ω–æ —â–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ)
    console.log("--- DEBUG: GET ITEMS API ---");
    console.log("SESSION:", JSON.stringify(session, null, 2));
    console.log("REQUESTED IDs:", { restaurantId, categoryId });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ ID
    if (!session?.user?.email || session.user.role !== 'OWNER' || isNaN(restaurantId) || isNaN(categoryId)) {
        console.error("DEBUG: FAILED CHECK 1 (401 Unauthorized)");
        return NextResponse.json({ error: 'Unauthorized or Invalid IDs' }, { status: 401 });
    }

    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–∞–ª–µ–∂–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –≤–ª–∞—Å–Ω–∏–∫–∞
        const category = await prisma.category.findFirst({
            where: {
                id: categoryId,
                restaurantId: restaurantId,
                restaurant: {
                    owner: { email: session.user.email }, // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–ª–∞—Å–Ω–∏–∫–∞
                },
            },
        });

        if (!category) {
            console.error("DEBUG: FAILED CHECK 2 (404 Not Found - Not owner or not exist)");
            return NextResponse.json({ error: 'Category not found or access denied' }, { status: 404 });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ (—Å—Ç—Ä–∞–≤–∏) —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        const dishes = await prisma.dish.findMany({
            where: {
                categoryId: categoryId,
            },
            orderBy: {
                name: 'asc',
            },
        });

        return NextResponse.json(dishes, { status: 200 });

    } catch (error) {
        console.error('Error fetching items:', error);
        return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
    }
}

// --- POST: –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ---
export async function POST(request, { params }) {
    const session = await getServerSession(authOptions);
    const restaurantId = parseInt(params.restaurantId);
    const categoryId = parseInt(params.categoryId);

    if (!session?.user?.email || session.user.role !== 'OWNER' || isNaN(restaurantId) || isNaN(categoryId)) {
        return NextResponse.json({ error: 'Unauthorized or Invalid IDs' }, { status: 401 });
    }

    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–∞–ª–µ–∂–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –≤–ª–∞—Å–Ω–∏–∫–∞
        const category = await prisma.category.findFirst({
            where: {
                id: categoryId,
                restaurantId: restaurantId,
                restaurant: {
                    owner: { email: session.user.email },
                },
            },
        });

        if (!category) {
            return NextResponse.json({ error: 'Category not found or access denied' }, { status: 404 });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
        const data = await request.json();
        if (!data.name || data.price === undefined) {
            return NextResponse.json({ error: 'Item name and price are required' }, { status: 400 });
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä (—Å—Ç—Ä–∞–≤—É)
        const newDish = await prisma.dish.create({
            data: {
                name: data.name,
                description: data.description,
                price: parseFloat(data.price), // –í–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —á–∏—Å–ª–æ
                calories: data.calories ? parseInt(data.calories) : null, // –ö–∞–ª–æ—Ä—ñ—ó –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ
                imageUrl: data.imageUrl,
                categoryId: categoryId, // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            },
        });

        return NextResponse.json(newDish, { status: 201 });

    } catch (error) {
        console.error('Error creating item:', error);
        return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
    }
}

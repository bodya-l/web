import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
// ‚ùóÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–û: –®–ª—è—Ö –¥–æ authOptions, –π–º–æ–≤—ñ—Ä–Ω–æ, –≤–µ–¥–µ –¥–æ 'lib', –∞ –Ω–µ –¥–æ '[...nextauth]'
import { authOptions } from '../../../../../../lib/auth.config';
import prisma from '../../../../../../lib/prisma';

// --- GET: –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É ---
export async function GET(request, { params }) {
    const session = await getServerSession(authOptions);
    const restaurantId = parseInt(params.restaurantId); // –û—Ç—Ä–∏–º—É—î–º–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –∑ URL

    // üí° 1. –ë–õ–û–ö –î–õ–Ø –î–ï–ë–ê–ì–£ (—Ç–µ–ø–µ—Ä –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)
    console.log("--- DEBUG: GET CATEGORIES API ---");
    console.log("SESSION:", JSON.stringify(session, null, 2));
    console.log("REQUESTED Restaurant ID:", restaurantId);
    // üí° 2. –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –î–ï–ë–ê–ì–£

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ ID
    if (!session?.user?.email || session.user.role !== 'OWNER' || isNaN(restaurantId)) {
        console.error("DEBUG: FAILED CHECK 1 (401 Unauthorized)"); // ‚¨ÖÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ª–æ–≥
        return NextResponse.json({ error: 'Unauthorized or Invalid ID' }, { status: 401 });
    }

    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–∞–ª–µ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–æ–º—É –≤–ª–∞—Å–Ω–∏–∫—É
        const restaurant = await prisma.restaurant.findFirst({
            where: {
                id: restaurantId,
                owner: { email: session.user.email }, // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–ª–∞—Å–Ω–∏–∫–∞
            },
        });

        if (!restaurant) {
            console.error("DEBUG: FAILED CHECK 2 (404 Not Found - Not owner or not exist)"); // ‚¨ÖÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ª–æ–≥
            return NextResponse.json({ error: 'Restaurant not found or access denied' }, { status: 404 });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ü—å–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        const categories = await prisma.category.findMany({
            where: {
                restaurantId: restaurantId,
            },
            orderBy: {
                name: 'asc',
            },
        });

        return NextResponse.json(categories, { status: 200 });

    } catch (error) {
        console.error('Error fetching categories:', error);
        return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
    }
}

// --- POST: –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É ---
export async function POST(request, { params }) {
    const session = await getServerSession(authOptions);
    const restaurantId = parseInt(params.restaurantId);

    if (!session?.user?.email || session.user.role !== 'OWNER' || isNaN(restaurantId)) {
        return NextResponse.json({ error: 'Unauthorized or Invalid ID' }, { status: 401 });
    }

    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–∞–ª–µ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–æ–º—É –≤–ª–∞—Å–Ω–∏–∫—É
        const restaurant = await prisma.restaurant.findFirst({
            where: {
                id: restaurantId,
                owner: { email: session.user.email },
            },
        });

        if (!restaurant) {
            return NextResponse.json({ error: 'Restaurant not found or access denied' }, { status: 404 });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
        const data = await request.json();
        if (!data.name) {
            return NextResponse.json({ error: 'Category name is required' }, { status: 400 });
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        const newCategory = await prisma.category.create({
            data: {
                name: data.name,
                description: data.description,
                restaurantId: restaurantId, // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
            },
        });

        return NextResponse.json(newCategory, { status: 201 });

    } catch (error) {
        console.error('Error creating category:', error);
        if (error.code === 'P2002') { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            return NextResponse.json({ error: 'Category with this name already exists in this restaurant' }, { status: 409 });
        }
        return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
    }
}

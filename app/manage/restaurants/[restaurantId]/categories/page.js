// app/manage/restaurants/[restaurantId]/categories/page.js
'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useParams, useRouter } from 'next/navigation'; // –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ URL
import Link from 'next/link';
import AddCategoryModal from '../../../../components/AddCategoryModal'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–∞–ª–∫—É

export default function ManageCategoriesPage() {
    const [categories, setCategories] = useState([]);
    const [restaurantName, setRestaurantName] = useState(''); // –©–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    const [isModalOpen, setIsModalOpen] = useState(false);
    const { data: session, status } = useSession();
    const params = useParams(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ URL ({ restaurantId: '...' })
    const router = useRouter(); // –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    const restaurantId = params.restaurantId;

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ restaurantId
    useEffect(() => {
        if (status === 'authenticated' && restaurantId) {
            const apiUrl = `/api/manage/restaurants/${restaurantId}/categories`;
            fetch(apiUrl)
                .then((res) => {
                    if (!res.ok) {
                        // –ú–æ–∂–ª–∏–≤–æ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É
                        if (res.status === 404 || res.status === 401) {
                            router.push('/manage/restaurants'); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
                        }
                        throw new Error('Failed to fetch categories');
                    }
                    return res.json();
                })
                .then((data) => {
                    setCategories(data);
                    // TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –æ–∫—Ä–µ–º–∏–º –∑–∞–ø–∏—Ç–æ–º –∞–±–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—ó
                    // setRestaurantName(data.restaurant.name); // –ü–æ–∫–∏ —â–æ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ
                })
                .catch((error) => {
                    console.error('Error fetching categories:', error);
                });
        }
    }, [status, restaurantId, router]);

    const handleCategoryAdded = (newCategory) => {
        setCategories((prevCategories) => [...prevCategories, newCategory]);
    };

    if (status === 'loading') {
        return <main className="pageContainer menuPageContainer"><div className="loadingText">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div></main>;
    }
    if (status === 'unauthenticated') {
        return <main className="pageContainer menuPageContainer"><div className="loadingText">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.</div></main>;
    }

    return (
        <>
            <AddCategoryModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onCategoryAdded={handleCategoryAdded}
                restaurantId={restaurantId} // –ü–µ—Ä–µ–¥–∞—î–º–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –≤ –º–æ–¥–∞–ª–∫—É
            />

            <main className="pageContainer menuPageContainer">
                <div className="manageContentWrapper">
                    <header className="manageHeader">
                        {/* ... (—Ö–µ–¥–µ—Ä –∞–¥–º—ñ–Ω–∫–∏) ... */}
                    </header>

                    <section className="manageSection">
                        <div className="manageSectionHeader">
                            <div>
                                {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
                                <Link href="/manage/restaurants" className="manageBackButton">
                                    ‚Üê Manage Restaurants
                                </Link>
                                {/* –ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É (–ø–æ–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–∞) */}
                                <h2>Manage Categories for {restaurantName || `Restaurant #${restaurantId}`}</h2>
                                <p>Add, edit, or delete categories for this menu</p>
                            </div>
                            <button
                                className="manageAddButton"
                                onClick={() => setIsModalOpen(true)}
                            >
                                + Add Category
                            </button>
                        </div>

                        {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π */}
                        <div className="manageCategoryList">
                            {Array.isArray(categories) && categories.length > 0 ? (
                                categories.map((category) => (
                                    <div key={category.id} className="manageCategoryCard">
                                        <div className="manageCategoryInfo">
                                            <h3>{category.name}</h3>
                                            <p>{category.description || 'No description'}</p>
                                            <span>{/* TODO: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–∞–≤ */} items</span>
                                        </div>
                                        <div className="manageCategoryActions">
                                            {/* –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∞–º–∏ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó */}
                                            <Link
                                                href={`/manage/restaurants/${restaurantId}/categories/${category.id}/items`}
                                                className="manageMenuButton" // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —Å—Ç–∏–ª—å
                                            >
                                                Manage Items
                                            </Link>
                                            <span className="actionIcon">‚öôÔ∏è</span>
                                            <span className="actionIcon">üóëÔ∏è</span>
                                        </div>
                                    </div>
                                ))
                            ) : (
                                <p className="noDataText">No categories added yet for this restaurant.</p>
                            )}
                        </div>
                    </section>
                </div>
            </main>
        </>
    );
}
// app/components/MyOrdersModal.tsx
'use client';

import { useState, useEffect } from 'react';
import { X, Clock, Utensils, CheckCircle, Package, Eye } from 'lucide-react';
import { useSession } from 'next-auth/react';
import Pusher from 'pusher-js';
import OrderDetailsModal from './OrderDetailsModal';

// ‚ñº‚ñº‚ñº –¢–ò–ü–ò –¢–ê –Ü–ù–¢–ï–†–§–ï–ô–°–ò ‚ñº‚ñº‚ñº
type OrderStatus = 'PENDING' | 'PREPARING' | 'READY' | 'COMPLETED';
type OrderItemDetail = { name: string; quantity: number; price: number; };

type OrderDisplay = {
    id: number;
    createdAt: string;
    totalPrice: number;
    status: OrderStatus;
    items: OrderItemDetail[]; 
};

const getStatusDetails = (status: OrderStatus) => {
    switch (status) {
        case 'READY': return { icon: CheckCircle, text: '–ì–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–∞—á—ñ!', color: 'text-green-600 bg-green-100' };
        case 'PREPARING': return { icon: Utensils, text: '–ì–æ—Ç—É—î—Ç—å—Å—è', color: 'text-yellow-600 bg-yellow-100' };
        case 'COMPLETED': return { icon: Package, text: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', color: 'text-gray-600 bg-gray-100' };
        default: return { icon: Clock, text: '–û—á—ñ–∫—É—î –ø—Ä–∏–π–Ω—è—Ç—Ç—è', color: 'text-red-600 bg-red-100' };
    }
};

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–ø—Å—ñ–≤ (–º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –∑ menu-secondary/page.tsx)
interface MyOrdersModalProps {
    isOpen: boolean;
    onClose: () => void;
    restaurantId: string; // ‚¨ÖÔ∏è –ü–æ—Ç—Ä—ñ–±–µ–Ω ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ù–û–í–Ü –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
}


export default function MyOrdersModal({ isOpen, onClose, restaurantId }: MyOrdersModalProps) {
    const [orders, setOrders] = useState<OrderDisplay[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { data: session, status } = useSession();
    const userId = session?.user?.id;
    const userIdString = userId ? String(userId) : null;
    
    const [isDetailsOpen, setIsDetailsOpen] = useState(false);
    const [selectedOrder, setSelectedOrder] = useState<OrderDisplay | null>(null);
    
    const openDetails = (order: OrderDisplay) => {
        setSelectedOrder(order);
        setIsDetailsOpen(true);
    };


    // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞ (–ø—Ä–∞—Ü—é—î –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ)
    useEffect(() => {
        if (!isOpen || status !== 'authenticated' || !userId) return;

        setIsLoading(true); 
        fetch(`/api/orders/my`, { cache: 'no-store' }) // –ó–∞–≤–∂–¥–∏ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
            .then(res => {
                if (!res.ok) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å.');
                return res.json();
            })
            .then(setOrders)
            .catch(err => {
                setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å.');
            })
            .finally(() => { 
                setIsLoading(false);
            });
            
    }, [isOpen, status, userId]); // –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ isOpen - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ

    // 2. –õ–æ–≥—ñ–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ Pusher (–û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ —Ç–∞ –ù–û–í–Ü –ó–ê–ú–û–í–õ–ï–ù–ù–Ø)
    useEffect(() => {
        if (status !== 'authenticated' || !userIdString || !restaurantId) {
            return;
        }
        
        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ù–û–í–û–ì–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø (—è–∫ –≤–ª–∞—Å–Ω–∏–∫)
        const restChannelName = `restaurant-${restaurantId}`;
        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ (–∫–∞–Ω–∞–ª –∫–ª—ñ—î–Ω—Ç–∞)
        const userChannelName = `user-${userIdString}`;

        const pusherClient = new Pusher(process.env.NEXT_PUBLIC_PUSHER_KEY!, {
          cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER!,
        });
        
        const restChannel = pusherClient.subscribe(restChannelName);
        const userChannel = pusherClient.subscribe(userChannelName);

        // A. –°–ª—É—Ö–∞—á –¥–ª—è –ù–û–í–ò–• –ó–ê–ú–û–í–õ–ï–ù–¨ (–ø–æ–¥—ñ—è, –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∑ /api/create-order)
        restChannel.bind('new-order', (data: { order: any, items: OrderItemDetail[], userName: string }) => {
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ, —â–æ–± –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¢–Ü–õ–¨–ö–ò –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (data.order.userId === userId) {
                 const newOrder: OrderDisplay = {
                    id: data.order.id,
                    createdAt: data.order.createdAt,
                    totalPrice: data.order.totalPrice,
                    status: 'PENDING',
                    items: data.items, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ items –∑ Pusher payload
                 };
                setOrders(prev => [newOrder, ...prev]); // ‚¨ÖÔ∏è –ú–ò–¢–¢–Ñ–í–û –î–û–î–ê–Ñ–ú–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
                alert(`üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${data.order.id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
            }
        });
        
        // B. –°–ª—É—Ö–∞—á –¥–ª—è –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£
        userChannel.bind('order-status-update', (data: { orderId: number, newStatus: OrderStatus, message: string }) => {
            setOrders(prev => prev.map(order => 
                order.id === data.orderId ? { ...order, status: data.newStatus } : order
            ));
        });


        return () => {
          restChannel.unbind_all();
          userChannel.unbind_all();
          pusherClient.unsubscribe(restChannelName);
          pusherClient.unsubscribe(userChannelName);
          pusherClient.disconnect();
        };
    }, [isOpen, userId, userIdString, status, restaurantId, session?.user?.id]); // –î–æ–¥–∞–Ω–æ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ


    if (!isOpen) {
        return null;
    }

    return (
        // ... (–≤–µ—Å—å return)
        <>
            {/* –ú–æ–¥–∞–ª–∫–∞ –¥–µ—Ç–∞–ª–µ–π */}
            {selectedOrder && (
                <OrderDetailsModal
                    isOpen={isDetailsOpen}
                    onClose={() => setIsDetailsOpen(false)}
                    orderId={selectedOrder.id}
                    items={selectedOrder.items}
                    total={selectedOrder.totalPrice}
                />
            )}

            {/* –û—Å–Ω–æ–≤–Ω–∞ –º–æ–¥–∞–ª–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å */}
            <div className="fixed inset-0 bg-black/60 flex justify-center items-center p-4 z-50" onClick={onClose}>
                <div className="bg-white rounded-xl w-full max-w-xl shadow-2xl relative flex flex-col max-h-[90vh] overflow-hidden" onClick={(e) => e.stopPropagation()}>
                    <button className="absolute top-3 right-4 text-2xl text-gray-400 cursor-pointer z-10 hover:text-gray-600" onClick={onClose}>
                        <X size={24} />
                    </button>
                    
                    <h2 className="text-2xl font-bold text-gray-900 p-6 pb-0">
                        –ú–æ—ó –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    </h2>

                    <div className="p-6 overflow-y-auto flex-grow space-y-4">
                        {isLoading ? (
                            <p className="text-center text-gray-500 py-8">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
                        ) : error ? (
                            <p className="text-center text-red-600 py-8">{error}</p>
                        ) : orders.length === 0 ? (
                            <p className="text-center text-gray-500 py-8">–í–∏ —â–µ –Ω–µ —Ä–æ–±–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å.</p>
                        ) : (
                            orders.map((order) => {
                                const details = getStatusDetails(order.status);
                                
                                const hasItems = order.items && order.items.length > 0;
                                
                                return (
                                    <div key={order.id} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                                        <div className="flex justify-between items-center mb-2">
                                            <h3 className="text-lg font-bold">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</h3>
                                            <div className={`flex items-center text-xs font-semibold px-2 py-1 rounded-full ${details.color}`}>
                                                <details.icon size={14} className="mr-1"/>
                                                {details.text}
                                            </div>
                                        </div>
                                        <p className="text-gray-700 text-sm mb-1">
                                            –î–∞—Ç–∞: {new Date(order.createdAt).toLocaleDateString()} {new Date(order.createdAt).toLocaleTimeString()}
                                        </p>
                                        <div className="flex justify-between items-end pt-2 border-t border-gray-200 mt-2">
                                            <span className="text-xl font-extrabold text-indigo-600">
                                                {order.totalPrice.toFixed(2)} –≥—Ä–Ω
                                            </span>
                                            
                                            {/* –ö–ù–û–ü–ö–ê "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" */}
                                            {hasItems ? (
                                                <button 
                                                    onClick={() => openDetails(order)}
                                                    className="flex items-center gap-1 text-sm text-blue-600 hover:text-blue-800 font-semibold transition"
                                                >
                                                    <Eye size={18} />
                                                    –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                                                </button>
                                            ) : (
                                                <span className="text-xs text-gray-400">–î–µ—Ç–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ</span>
                                            )}
                                        </div>
                                    </div>
                                );
                            })
                        )}
                    </div>

                    <div className="p-6 pt-0 flex-shrink-0">
                        <button onClick={onClose} className="w-full bg-gray-200 text-gray-700 px-4 py-3 rounded-lg font-bold hover:bg-gray-300 transition">
                            –ó–∞–∫—Ä–∏—Ç–∏
                        </button>
                    </div>
                </div>
            </div>
        </>
    );
}
// app/components/CartModal.js
'use client';

import { useState } from 'react';
import { useCart } from '@/context/CartContext'; // –ù–û–í–ò–ô –ê–ë–°–û–õ–Æ–¢–ù–ò–ô –®–õ–Ø–•
import Image from 'next/image';
import { X, Trash2, Minus, Plus } from 'lucide-react'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ–∫–æ–Ω–∫–∏

export default function CartModal({ isOpen, onClose }) {
    const { cartItems, removeFromCart, updateQuantity, cartTotal } = useCart();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    if (!isOpen) {
        return null;
    }

    const handleCheckout = async () => {
        setIsLoading(true);
        setError('');
        console.log('Proceeding to checkout with items:', cartItems);

        try {
            const res = await fetch('/api/payment/mono', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ items: cartItems, totalAmount: cartTotal }),
            });

            const data = await res.json();

            if (!res.ok || !data.pageUrl) {
                throw new Error(data.error || 'Failed to initiate payment');
            }
            window.location.href = data.pageUrl;

        } catch (err) {
            console.error('Checkout error:', err);
            setError('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –æ–ø–ª–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } finally {
            setIsLoading(false);
        }
    };


    return (
        <div className="profileOverlay" onClick={onClose}>
            <div className="profileModal cartModal" onClick={(e) => e.stopPropagation()}>
                <button className="profileCloseButton" onClick={onClose}>
                    <X size={24} /> {/* –ó–∞–º—ñ–Ω–∞ √ó */}
                </button>
                <h2 className="modalTitle">–í–∞—à –ö–æ—à–∏–∫</h2>

                {/* –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é */}
                <div className="cartModalContent">
                    {cartItems.length === 0 ? (
                        <p className="emptyCartText">–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.</p>
                    ) : (
                        <div className="cartItemsList">
                            {cartItems.map((item) => (
                                <div key={item.id} className="cartItem">
                                    <div className="cartItemImage">
                                        <Image
                                            src={item.imageUrl || '/images/placeholder.jpg'}
                                            alt={item.name}
                                            width={50}
                                            height={50}
                                            objectFit="cover"
                                        />
                                    </div>
                                    <div className="cartItemDetails">
                                        <span className="cartItemName">{item.name}</span>
                                        <span className="cartItemPrice">{item.price} –≥—Ä–Ω</span>
                                    </div>
                                    <div className="cartItemQuantity">
                                        <button onClick={() => updateQuantity(item.id, item.quantity - 1)}><Minus size={16}/></button> {/* –ó–∞–º—ñ–Ω–∞ - */}
                                        <span>{item.quantity}</span>
                                        <button onClick={() => updateQuantity(item.id, item.quantity + 1)}><Plus size={16}/></button> {/* –ó–∞–º—ñ–Ω–∞ + */}
                                    </div>
                                    <button className="cartItemRemove" onClick={() => removeFromCart(item.id)}>
                                        <Trash2 size={18} /> {/* –ó–∞–º—ñ–Ω–∞ üóëÔ∏è */}
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div> {/* –ö—ñ–Ω–µ—Ü—å cartModalContent */}

                {error && <p className="loginError" style={{marginTop: '1rem', margin: '0 1.5rem 1rem'}}>{error}</p>}

                {cartItems.length > 0 && (
                    <div className="cartFooter">
                        <div className="cartTotal">
                            <span>–†–∞–∑–æ–º:</span>
                            <span>{cartTotal.toFixed(2)} –≥—Ä–Ω</span>
                        </div>
                        <button
                            className="modalButton primary checkoutButton"
                            onClick={handleCheckout}
                            disabled={isLoading}
                        >
                            {isLoading ? '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É...' : '–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (Mono)'}
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
}
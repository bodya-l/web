// app/components/OrderButton.tsx
'use client';

import { useState } from 'react';

type CartItem = {
  dishId: number; 
  quantity: number;
};

type Props = {
  cartItems: CartItem[];
  restaurantId: string; // üí° 1. –î–æ–¥–∞—î–º–æ restaurantId –¥–æ –ø—Ä–æ–ø—Å—ñ–≤
};

export function OrderButton({ cartItems, restaurantId }: Props) { // üí° 2. –û—Ç—Ä–∏–º—É—î–º–æ restaurantId
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleOrderClick = async () => {
    setIsLoading(true);
    setError(null);

    // üí° 3. –î–æ–¥–∞—î–º–æ restaurantId –¥–æ –¥–∞–Ω–∏—Ö, —â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è
    const orderData = {
      cart: cartItems,
      restaurantId: restaurantId, // ‚¨ÖÔ∏è –û—Å—å –≤–æ–Ω–æ!
    };

    try {
      const response = await fetch('/api/create-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData), // üí° 4. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ
      });

      if (!response.ok) {
        let errData = { message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
        try {
            errData = await response.json();
        } catch (e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ
        }
        throw new Error(errData.message || `–ü–æ–º–∏–ª–∫–∞: ${response.status}`);
      }

      const result = await response.json();
      alert('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.');
      
      // –¢—É—Ç –º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      // clearCart(); 

    } catch (err: any) {
      setError(err.message);
      alert(`–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div>
      <button 
        onClick={handleOrderClick} 
        disabled={isLoading || cartItems.length === 0}
        className="w-full bg-green-600 text-white px-4 py-3 rounded-xl font-bold text-lg hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed shadow-lg"
      >
        {isLoading ? '–û–±—Ä–æ–±–∫–∞...' : '–ó–∞–º–æ–≤–∏—Ç–∏'}
      </button>
      {error && <p className="text-red-600 text-sm mt-3">{error}</p>}
    </div>
  );
}
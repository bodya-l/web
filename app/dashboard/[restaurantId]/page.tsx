// app/dashboard/[restaurantId]/page.tsx
'use client';

import { useEffect, useState } from 'react';
import Pusher from 'pusher-js';
import { useParams } from 'next/navigation';
import { Utensils, Timer, Clock } from 'lucide-react'; 

// --- –¢–ò–ü–ò ---

// –õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–∏–ø, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î UI –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
type ItemDetails = {
  name: string;
  quantity: number;
  price: number;
}

// –õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è UI
type Order = {
  id: number;
  createdAt: string;
  totalPrice: number;
  userName: string;
  items: ItemDetails[];
  status: 'PENDING' | 'PREPARING' | 'READY' | 'COMPLETED';
};

// üí° 1. –¢–∏–ø –¥–∞–Ω–∏—Ö, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∑ API (–ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó)
// (–ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–∞–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ Prisma)
type ApiOrderResponse = {
    id: number;
    createdAt: string;
    totalPrice: number;
    status: Order['status'];
    user: {
        name: string | null;
    };
    items: {
        quantity: number;
        priceAtPurchase: number;
        dish: {
            name: string;
        };
    }[];
};

// üí° 2. –¢–∏–ø –¥–∞–Ω–∏—Ö, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∑ PUSHER (–∑ /api/create-order)
type NewOrderPusherPayload = {
    message: string;
    order: {
        id: number;
        totalPrice: number;
        status: 'PENDING';
        createdAt: string;
        items: {
            name: string;
            quantity: number;
            priceAtPurchase: number;
        }[];
    };
    userName: string;
};

// --- –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ê –•–ï–õ–ü–ï–†–ò ---

const getStatusColor = (status: Order['status']) => {
  switch (status) {
    case 'READY': return 'text-green-600 bg-green-100';
    case 'PREPARING': return 'text-yellow-600 bg-yellow-100';
    case 'COMPLETED': return 'text-gray-600 bg-gray-100';
    default: return 'text-red-600 bg-red-100';
  }
};

const STATUS_PRIORITY = {
    'READY': 1,       
    'PREPARING': 2,   
    'PENDING': 3,     
    'COMPLETED': 4,   
};

const sortOrders = (orders: Order[]) => {
    return [...orders].sort((a, b) => {
        const priorityA = STATUS_PRIORITY[a.status];
        const priorityB = STATUS_PRIORITY[b.status];
        
        if (priorityA !== priorityB) {
            return priorityA - priorityB;
        }
        
        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
    });
};


export default function RestaurantDashboard() {
  const params = useParams();
  const restaurantId = params.restaurantId as string;
  
  const [orders, setOrders] = useState<Order[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Pusher
  useEffect(() => {
    if (!restaurantId) return;

    const channelName = `restaurant-${restaurantId}`;
    
    // --- A. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑ –ë–î ---
    const fetchInitialOrders = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const res = await fetch(`/api/orders/restaurant/${restaurantId}`, { 
                 cache: 'no-store' 
            });

            if (!res.ok) {
                const errData = await res.json();
                throw new Error(errData.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å.');
            }

            // üí° 3. –û–¢–†–ò–ú–£–Ñ–ú–û "–°–ò–†–Ü" –î–ê–ù–Ü –ó API
            const data: ApiOrderResponse[] = await res.json();
            
            // üí° 4. –¢–†–ê–ù–°–§–û–†–ú–£–Ñ–ú–û –î–ê–ù–Ü –£ –õ–û–ö–ê–õ–¨–ù–ò–ô –¢–ò–ü "Order"
            const transformedOrders: Order[] = data.map(order => ({
                id: order.id,
                createdAt: order.createdAt,
                totalPrice: order.totalPrice,
                status: order.status,
                // –ú–∞–ø–∏–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –¥–∞–Ω—ñ
                userName: order.user?.name || '–ö–ª—ñ—î–Ω—Ç', // ‚¨ÖÔ∏è –∑ order.user.name
                items: order.items.map(item => ({     // ‚¨ÖÔ∏è –∑ order.items
                    name: item.dish.name,
                    quantity: item.quantity,
                    price: item.priceAtPurchase
                }))
            }));

            setOrders(sortOrders(transformedOrders)); // ‚¨ÖÔ∏è –°–û–†–¢–£–Ñ–ú–û –¢–†–ê–ù–°–§–û–†–ú–û–í–ê–ù–Ü
        } catch (err: any) {
            setError(err.message);
            setOrders([]);
        } finally {
            setIsLoading(false);
        }
    };
    
    fetchInitialOrders();


    // --- B. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Pusher ---
    const pusherClient = new Pusher(process.env.NEXT_PUBLIC_PUSHER_KEY!, {
      cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER!,
    });

    const channel = pusherClient.subscribe(channelName);

    // üí° 5. –í–ò–ü–†–ê–í–õ–ï–ù–û: –°–ª—É—Ö–∞—á –ù–û–í–ò–• –ó–ê–ú–û–í–õ–ï–ù–¨
    channel.bind('new-order', (data: NewOrderPusherPayload) => {
      console.log('Pusher: –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!', data);
      
      // –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑–≥—ñ–¥–Ω–æ —Ç–∏–ø—É NewOrderPusherPayload
      const newOrder: Order = {
          id: data.order.id,
          createdAt: data.order.createdAt,
          totalPrice: data.order.totalPrice,
          status: data.order.status, // –¶–µ 'PENDING'
          userName: data.userName,   // ‚¨ÖÔ∏è –∑ data.userName
          items: data.order.items.map(item => ({ // ‚¨ÖÔ∏è –∑ data.order.items
              name: item.name,
              quantity: item.quantity,
              price: item.priceAtPurchase
          })),
      };
      
      setOrders(prev => sortOrders([newOrder, ...prev])); 
    });

    // –°–ª—É—Ö–∞—á –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ (—Ü–µ–π –∫–æ–¥ –±—É–≤ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º)
    channel.bind('order-status-update', (data: { orderId: number, newStatus: Order['status'] }) => {
         console.log('Pusher: –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É!', data);
         setOrders(prev => {
             const updatedOrders = prev.map(order => 
                 order.id === data.orderId ? { ...order, status: data.newStatus } : order
             );
             return sortOrders(updatedOrders);
         });
    });


    // Cleanup
    return () => {
      channel.unbind_all();
      pusherClient.unsubscribe(channelName);
      pusherClient.disconnect();
    };
  }, [restaurantId]);
  
  
  // 3. –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É (–¶–µ–π –∫–æ–¥ –±—É–≤ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º)
  const handleStatusChange = async (orderId: number, currentStatus: Order['status']) => {
      let newStatus: Order['status'];

      if (currentStatus === 'PENDING') newStatus = 'PREPARING';
      else if (currentStatus === 'PREPARING') newStatus = 'READY';
      else if (currentStatus === 'READY') newStatus = 'COMPLETED';
      else return; 

      // 1. –û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
      setOrders(prev => {
            const updatedOrders = prev.map(order => 
                order.id === orderId ? { ...order, status: newStatus } : order
            );
            return sortOrders(updatedOrders);
        });
      
      // 2. –í–∏–∫–ª–∏–∫ API –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
      try {
          const res = await fetch(`/api/manage/order/${orderId}/status`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ status: newStatus }),
          });
          
          if (!res.ok) {
              throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.');
              // (–¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤—ñ–¥–∫–∞—Ç—É —Å—Ç–∞–Ω—É, —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è)
          }
      } catch (error) {
          console.error("–ü–æ–º–∏–ª–∫–∞ PUT-–∑–∞–ø–∏—Ç—É:", error);
          // (–õ–æ–≥—ñ–∫–∞ –≤—ñ–¥–∫–∞—Ç—É)
      }
  };

  // --- –†–ï–ù–î–ï–† ---

  if (isLoading) return <div className="p-8 text-center text-gray-500">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å...</div>;
  if (error) return <div className="p-8 text-center text-red-600">–ü–æ–º–∏–ª–∫–∞: {error}</div>;

  return (
    <main className="w-full min-h-screen bg-gray-50 p-4 sm:p-8">
      <header className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 flex items-center gap-3">
          <Utensils size={32} className="text-indigo-600"/>
          –ö—É—Ö–Ω—è (–î–∞—à–±–æ—Ä–¥) - –†–µ—Å—Ç–æ—Ä–∞–Ω #{restaurantId}
        </h1>
        <p className="text-gray-500 mt-1">–û—á—ñ–∫—É—é—Ç—å –Ω–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è: {orders.filter(o => o.status === 'PENDING').length || 0}</p>
      </header>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {orders.length > 0 ? (
          orders.map((order) => (
            // –ö–∞—Ä—Ç–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            <div key={order.id} className={`bg-white rounded-xl shadow-lg border flex flex-col justify-between p-6 ${order.status === 'PENDING' ? 'border-red-200' : 'border-gray-100'}`}>
              
              {/* –•–µ–¥–µ—Ä –∫–∞—Ä—Ç–∫–∏ */}
              <div className="mb-4">
                <div className={`inline-flex items-center text-xs font-semibold px-3 py-1 rounded-full ${getStatusColor(order.status)} mb-2`}>
                  {order.status === 'PENDING' ? <Clock size={14} className="mr-1"/> : <Timer size={14} className="mr-1"/>}
                  {order.status}
                </div>
                <h3 className="text-xl font-bold mb-1">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</h3>
                <p className="text-sm text-gray-600">–ö–ª—ñ—î–Ω—Ç: {order.userName}</p>
                <p className="text-xs text-gray-400">{new Date(order.createdAt).toLocaleTimeString('uk-UA')}</p>
              </div>

              {/* –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
              <div className="flex-grow py-4 border-y border-gray-100">
                <ul className="space-y-1 text-sm max-h-40 overflow-y-auto pr-2">
                  {order.items.map((item, index) => (
                    <li key={index} className="flex justify-between items-start gap-2">
                      <span className="text-gray-700 font-medium break-words pr-2">{item.name} (x{item.quantity})</span>
                      <span className="text-gray-500 font-semibold flex-shrink-0">{item.price.toFixed(2)} –≥—Ä–Ω</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* –§—É—Ç–µ—Ä –∫–∞—Ä—Ç–∫–∏ */}
              <div className="mt-4 flex justify-between items-center">
                <span className="text-lg font-extrabold text-indigo-600">
                  –í—Å—å–æ–≥–æ: {order.totalPrice.toFixed(2)} –≥—Ä–Ω
                </span>
                
                {/* –ö–Ω–æ–ø–∫–∞ –¥—ñ—ó */}
                {order.status === 'PENDING' && (
                  <button 
                      onClick={() => handleStatusChange(order.id, 'PENDING')}
                      className="bg-green-500 text-white px-4 py-2 rounded-lg text-sm font-semibold hover:bg-green-600 transition shadow-sm"
                  >
                    –ü—Ä–∏–π–Ω—è—Ç–∏
                  </button>
                )}
                {order.status === 'PREPARING' && (
                  <button 
                      onClick={() => handleStatusChange(order.id, 'PREPARING')}
                      className="bg-indigo-500 text-white px-4 py-2 rounded-lg text-sm font-semibold hover:bg-indigo-600 transition shadow-sm"
                  >
                    –ì–æ—Ç–æ–≤–æ
                  </button>
                )}
                {order.status === 'READY' && (
                  <button 
                      onClick={() => handleStatusChange(order.id, 'READY')}
                      className="bg-gray-400 text-white px-4 py-2 rounded-lg text-sm font-semibold cursor-pointer hover:bg-gray-500 transition shadow-sm"
                  >
                    –í–∏–¥–∞—Ç–∏
                  </button>
                )}
                {order.status === 'COMPLETED' && (
                  <span className="text-sm font-medium text-gray-500">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                )}
              </div>
            </div>
          ))
        ) : (
          <p className="col-span-full text-center text-gray-500 p-10 bg-white rounded-xl shadow-inner">–ù–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –Ω–∞–¥—Ö–æ–¥–∏–ª–æ.</p>
        )}
      </div>
    </main>
  );
}
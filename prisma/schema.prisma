// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ▼▼▼ МОДЕЛЬ USER, ВИПРАВЛЕНА ДЛЯ NEXT-AUTH ▼▼▼
model User {
  // id ТЕПЕР STRING (CUID), ЯК ЦЬОГО ОЧІКУЄ NEXT-AUTH
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image     String?
  
  // 'password' залишається опціональним
  password  String?
  
  role      String    @default("CUSTOMER")
  createdAt DateTime  @default(now())

  // Зв'язки
  accounts  Account[]
  sessions  Session[]
}

// ▼▼▼ МОДЕЛІ NEXT-AUTH (userId ТЕПЕР STRING) ▼▼▼

model Account {
  id                String  @id @default(cuid())
  // userId ТЕПЕР STRING, щоб відповідати User.id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  // userId ТЕПЕР STRING, щоб відповідати User.id
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ▼▼▼ ВАШІ МОДЕЛІ (ЗАЛИШАЄМО З INT ID, ЦЕ ОК) ▼▼▼

model Category {
  id     Int    @id @default(autoincrement())
  name   String @unique
  dishes Dish[]
}

model Dish {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  calories    Int
  imageUrl    String
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
}
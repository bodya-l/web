
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  OWNER
}


model User {
  id              Int      @id @default(autoincrement())
  name            String?
  email           String?  @unique
  emailVerified   DateTime?
  image           String?
  password        String?

  role            Role     @default(CUSTOMER)
  level           Int      @default(1)
  progress        Int      @default(0)

  accounts        Account[]
  sessions        Session[]

  restaurants     Restaurant[]
  orders          Order[]
}


model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  bannerUrl   String?
  logoUrl     String?
  address     String?
  
  stars       Float    @default(5.0) 
  
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])
  categories  Category[]
  

  orders      Order[] @relation("OrderToRestaurant")
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  dishes       Dish[]
}

model Dish {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  calories      Int?
  imageUrl      String?
  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  
  orderItems    OrderItem[] 
}



model OrderItem {
    id              Int      @id @default(autoincrement())
    orderId         Int
    dishId          Int
    quantity        Int
    priceAtPurchase Float

    order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    dish            Dish     @relation(fields: [dishId], references: [id])
}



model Order {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  totalPrice   Float
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  restaurantId Int
  

  restaurant   Restaurant @relation("OrderToRestaurant", fields: [restaurantId], references: [id])

  status       String   @default("PENDING")
  
  items        OrderItem[]
}